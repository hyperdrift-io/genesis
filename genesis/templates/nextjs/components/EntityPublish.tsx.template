import { useState } from 'react';
import { Button } from "./ui/button";
import { Card, CardContent, CardFooter, CardHeader } from "./ui/card";
import {
  Eye,
  EyeOff,
  Clock,
  Calendar,
  Check,
  AlertCircle
} from "lucide-react";
import { cn } from "@/lib/utils";
import { useRouter } from "next/navigation";
import { use{{$ entity_type $}}Store } from "@/store/{{$ entity_name $}}Store";

type PublishStatus = 'draft' | 'published' | 'scheduled';

type {{$ entity_type $}}PublishProps = {
  {{$ entity_name $}}Id: string;
  currentStatus: PublishStatus;
  scheduledTime?: string;
  className?: string;
  onStatusChange?: (status: PublishStatus, scheduledTime?: string) => void;
};

export default function {{$ entity_type $}}Publish({
  {{$ entity_name $}}Id,
  currentStatus = 'draft',
  scheduledTime,
  className,
  onStatusChange
}: {{$ entity_type $}}PublishProps) {
  const router = useRouter();
  const { update{{$ entity_type $}} } = use{{$ entity_type $}}Store();
  const [status, setStatus] = useState<PublishStatus>(currentStatus);
  const [publishDate, setPublishDate] = useState<string>(scheduledTime || '');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleStatusChange = async (newStatus: PublishStatus) => {
    setStatus(newStatus);

    // If we're scheduling, we need a date
    if (newStatus === 'scheduled' && !publishDate) {
      // Set default to tomorrow
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      tomorrow.setHours(9, 0, 0, 0);
      setPublishDate(tomorrow.toISOString());
    }

    if (onStatusChange) {
      onStatusChange(newStatus, newStatus === 'scheduled' ? publishDate : undefined);
    }
  };

  const handleSave = async () => {
    setIsSubmitting(true);
    try {
      // Update the {{$ entity_name $}} status
      await update{{$ entity_type $}}({{$ entity_name $}}Id, {
        status,
        ...(status === 'scheduled' ? { scheduledPublishTime: publishDate } : {})
      });

      router.refresh();
    } catch (error) {
      console.error('Failed to update publish status:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const getStatusIcon = () => {
    switch(status) {
      case 'published':
        return <Eye className="h-5 w-5 text-green-500" />;
      case 'draft':
        return <EyeOff className="h-5 w-5 text-amber-500" />;
      case 'scheduled':
        return <Clock className="h-5 w-5 text-blue-500" />;
      default:
        return null;
    }
  };

  return (
    <Card className={cn("w-full", className)}>
      <CardHeader className="pb-2">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-medium">Publishing Options</h3>
          {getStatusIcon()}
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex flex-col space-y-2">
          <div
            className={cn(
              "p-3 rounded-md border cursor-pointer",
              status === 'draft' ? "bg-amber-50 border-amber-200" : "bg-white",
            )}
            onClick={() => handleStatusChange('draft')}
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <EyeOff className="h-4 w-4 text-amber-500" />
                <span className="font-medium">Draft</span>
              </div>
              {status === 'draft' && <Check className="h-4 w-4 text-amber-500" />}
            </div>
            <p className="text-sm text-gray-500 mt-1">Only visible to editors</p>
          </div>

          <div
            className={cn(
              "p-3 rounded-md border cursor-pointer",
              status === 'published' ? "bg-green-50 border-green-200" : "bg-white",
            )}
            onClick={() => handleStatusChange('published')}
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <Eye className="h-4 w-4 text-green-500" />
                <span className="font-medium">Published</span>
              </div>
              {status === 'published' && <Check className="h-4 w-4 text-green-500" />}
            </div>
            <p className="text-sm text-gray-500 mt-1">Visible to everyone</p>
          </div>

          <div
            className={cn(
              "p-3 rounded-md border cursor-pointer",
              status === 'scheduled' ? "bg-blue-50 border-blue-200" : "bg-white",
            )}
            onClick={() => handleStatusChange('scheduled')}
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <Clock className="h-4 w-4 text-blue-500" />
                <span className="font-medium">Scheduled</span>
              </div>
              {status === 'scheduled' && <Check className="h-4 w-4 text-blue-500" />}
            </div>
            <p className="text-sm text-gray-500 mt-1">Will be published at specified time</p>
          </div>
        </div>

        {status === 'scheduled' && (
          <div className="flex flex-col space-y-2">
            <label htmlFor="publishDate" className="text-sm font-medium">
              Publish Date & Time
            </label>
            <div className="relative">
              <Calendar className="absolute left-2 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-500" />
              <input
                type="datetime-local"
                id="publishDate"
                className="w-full rounded-md border border-gray-300 py-2 pl-8 pr-4"
                value={publishDate ? new Date(publishDate).toISOString().slice(0, 16) : ''}
                onChange={(e) => setPublishDate(new Date(e.target.value).toISOString())}
              />
            </div>
            {!publishDate && (
              <div className="flex items-center text-red-500 text-sm">
                <AlertCircle className="h-4 w-4 mr-1" />
                <span>Please select a publish date</span>
              </div>
            )}
          </div>
        )}
      </CardContent>
      <CardFooter>
        <Button
          onClick={handleSave}
          disabled={isSubmitting || (status === 'scheduled' && !publishDate)}
          className="w-full"
        >
          {isSubmitting ? 'Saving...' : 'Save Publishing Settings'}
        </Button>
      </CardFooter>
    </Card>
  );
}
