import { useState } from 'react';
import { Star } from 'lucide-react';
import { Button } from "./ui/button";
import { Textarea } from "./ui/textarea";
import { cn } from "@/lib/utils";
import { use{{$ entity_type $}}Store } from "@/store/{{$ entity_name $}}Store";

interface {{$ entity_type $}}RatingProps {
  {{$ entity_name $}}Id: string;
  existingRating?: number;
  existingReview?: string;
  onRatingSubmitted?: () => void;
  className?: string;
  readOnly?: boolean;
}

export default function {{$ entity_type $}}Rating({
  {{$ entity_name $}}Id,
  existingRating = 0,
  existingReview = '',
  onRatingSubmitted,
  className,
  readOnly = false
}: {{$ entity_type $}}RatingProps) {
  const { update{{$ entity_type $}} } = use{{$ entity_type $}}Store();
  const [rating, setRating] = useState(existingRating);
  const [hoveredRating, setHoveredRating] = useState(0);
  const [review, setReview] = useState(existingReview);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleRatingHover = (hoveredValue: number) => {
    if (readOnly) return;
    setHoveredRating(hoveredValue);
  };

  const handleRatingClick = (selectedValue: number) => {
    if (readOnly) return;
    setRating(selectedValue);
  };

  const handleSubmit = async () => {
    if (readOnly) return;

    setIsSubmitting(true);
    try {
      // Get current user info (in a real app, this would come from an auth context)
      const userId = 'current-user-id';
      const userName = 'Current User';

      // Update the entity with the new rating
      await update{{$ entity_type $}}({{$ entity_name $}}Id, {
        reviews: [{
          id: Date.now().toString(),
          userId,
          userName,
          rating,
          comment: review,
          createdAt: new Date().toISOString()
        }]
      });

      if (onRatingSubmitted) {
        onRatingSubmitted();
      }
    } catch (error) {
      console.error('Failed to submit rating:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className={cn("space-y-4", className)}>
      <div className="flex flex-col space-y-2">
        <span className="text-sm font-medium">
          {readOnly ? 'Rating' : 'Rate this {{$ entity_name $}}'}
        </span>
        <div className="flex items-center">
          {[1, 2, 3, 4, 5].map((value) => (
            <Star
              key={value}
              className={cn(
                'h-6 w-6 cursor-pointer',
                (value <= (hoveredRating || rating))
                  ? 'text-yellow-400 fill-yellow-400'
                  : 'text-gray-300',
                readOnly && 'cursor-default'
              )}
              onMouseEnter={() => handleRatingHover(value)}
              onMouseLeave={() => handleRatingHover(0)}
              onClick={() => handleRatingClick(value)}
            />
          ))}
          <span className="ml-2 text-sm text-gray-600">
            {rating > 0 ? `${rating} out of 5` : 'Not rated yet'}
          </span>
        </div>
      </div>

      {!readOnly && (
        <>
          <div className="flex flex-col space-y-2">
            <label htmlFor="review" className="text-sm font-medium">
              Your Review (optional)
            </label>
            <Textarea
              id="review"
              placeholder="Write your thoughts about this {{$ entity_name $}}..."
              rows={4}
              value={review}
              onChange={(e) => setReview(e.target.value)}
              className="resize-none"
            />
          </div>

          <Button
            onClick={handleSubmit}
            disabled={isSubmitting || rating === 0}
            className="w-full"
          >
            {isSubmitting ? 'Submitting...' : 'Submit Rating'}
          </Button>
        </>
      )}
    </div>
  );
}
