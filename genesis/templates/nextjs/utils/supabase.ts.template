'use client';

import { createClient } from '@supabase/supabase-js';

// Initialize the Supabase client
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';

if (!supabaseUrl || !supabaseAnonKey) {
  console.warn('Missing Supabase environment variables. Please check your .env.local file.');
}

// Create a single supabase client for the entire app
export const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Helper function to check if the client is properly initialized
export function isSupabaseConfigured(): boolean {
  return Boolean(supabaseUrl && supabaseAnonKey);
}

// Generic function to get data from a table
export async function getFromTable<T>(tableName: string, options?: any): Promise<T[]> {
  let query = supabase.from(tableName).select('*');

  // Apply additional query options if provided
  if (options?.filters) {
    for (const [column, value] of Object.entries(options.filters)) {
      query = query.eq(column, value);
    }
  }

  if (options?.orderBy) {
    query = query.order(options.orderBy.column, {
      ascending: options.orderBy.ascending,
    });
  }

  if (options?.limit) {
    query = query.limit(options.limit);
  }

  const { data, error } = await query;

  if (error) {
    console.error(`Error fetching data from ${tableName}:`, error);
    throw new Error(`Failed to fetch data from ${tableName}`);
  }

  return data as T[];
}

// Generic function to get a single item by ID
export async function getById<T>(tableName: string, id: string): Promise<T> {
  const { data, error } = await supabase
    .from(tableName)
    .select('*')
    .eq('id', id)
    .single();

  if (error) {
    console.error(`Error fetching item from ${tableName}:`, error);
    throw new Error(`Failed to fetch item from ${tableName}`);
  }

  return data as T;
}

// Generic function to insert a new item
export async function insertItem<T>(tableName: string, item: Partial<T>): Promise<T> {
  const { data, error } = await supabase
    .from(tableName)
    .insert(item)
    .select()
    .single();

  if (error) {
    console.error(`Error inserting item into ${tableName}:`, error);
    throw new Error(`Failed to insert item into ${tableName}`);
  }

  return data as T;
}

// Generic function to update an item
export async function updateItem<T extends { id: string }>(
  tableName: string,
  item: T
): Promise<T> {
  const { data, error } = await supabase
    .from(tableName)
    .update(item)
    .eq('id', item.id)
    .select()
    .single();

  if (error) {
    console.error(`Error updating item in ${tableName}:`, error);
    throw new Error(`Failed to update item in ${tableName}`);
  }

  return data as T;
}

// Generic function to delete an item
export async function deleteItem(tableName: string, id: string): Promise<void> {
  const { error } = await supabase
    .from(tableName)
    .delete()
    .eq('id', id);

  if (error) {
    console.error(`Error deleting item from ${tableName}:`, error);
    throw new Error(`Failed to delete item from ${tableName}`);
  }
}
