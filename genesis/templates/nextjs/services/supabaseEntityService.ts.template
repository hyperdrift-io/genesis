'use client';

import { {{entity_type}} } from '../types/{{entity_name}}';
import { supabase, getFromTable, getById, insertItem, updateItem, deleteItem } from '../utils/supabase';

const TABLE_NAME = '{{table_name}}s';

/**
 * Get all {{entity_name}}s using Supabase
 */
export async function getAll{{entity_type}}s(): Promise<{{entity_type}}[]> {
  try {
    return await getFromTable<{{entity_type}}>(TABLE_NAME, {
      orderBy: {
        column: 'created_at',
        ascending: false
      }
    });
  } catch (error) {
    console.error('Failed to fetch {{entity_name}}s:', error);
    throw error;
  }
}

/**
 * Get a {{entity_name}} by ID using Supabase
 */
export async function get{{entity_type}}ById(id: string): Promise<{{entity_type}}> {
  try {
    return await getById<{{entity_type}}>(TABLE_NAME, id);
  } catch (error) {
    console.error(`Failed to fetch {{entity_name}} with ID ${id}:`, error);
    throw error;
  }
}

/**
 * Create a new {{entity_name}} using Supabase
 */
export async function create{{entity_type}}(data: Partial<{{entity_type}}>): Promise<{{entity_type}}> {
  try {
    // Add timestamps
    const itemWithTimestamps = {
      ...data,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    return await insertItem<{{entity_type}}>(TABLE_NAME, itemWithTimestamps);
  } catch (error) {
    console.error('Failed to create {{entity_name}}:', error);
    throw error;
  }
}

/**
 * Update a {{entity_name}} using Supabase
 */
export async function update{{entity_type}}({{entity_name}}: {{entity_type}}): Promise<{{entity_type}}> {
  try {
    // Update timestamp
    const updatedItem = {
      ...{{entity_name}},
      updated_at: new Date().toISOString()
    };

    return await updateItem<{{entity_type}}>(TABLE_NAME, updatedItem);
  } catch (error) {
    console.error(`Failed to update {{entity_name}} with ID ${{{entity_name}}.id}:`, error);
    throw error;
  }
}

/**
 * Delete a {{entity_name}} using Supabase
 */
export async function delete{{entity_type}}(id: string): Promise<void> {
  try {
    await deleteItem(TABLE_NAME, id);
  } catch (error) {
    console.error(`Failed to delete {{entity_name}} with ID ${id}:`, error);
    throw error;
  }
}

/**
 * Check if the table exists and create it if it doesn't
 * This is useful for development but should be replaced with proper migrations in production
 */
export async function ensure{{entity_type}}TableExists(): Promise<void> {
  const { error } = await supabase
    .from(TABLE_NAME)
    .select('id')
    .limit(1);

  if (error && error.code === '42P01') { // Table doesn't exist
    console.log(`${TABLE_NAME} table doesn't exist. Creating it...`);

    // Note: This is a simplified example. In a real app, use proper migrations.
    const { error: createError } = await supabase.rpc('create_{{table_name}}_table');

    if (createError) {
      console.error(`Failed to create ${TABLE_NAME} table:`, createError);
    } else {
      console.log(`${TABLE_NAME} table created successfully`);
    }
  }
}
