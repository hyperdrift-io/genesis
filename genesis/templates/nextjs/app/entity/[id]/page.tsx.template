'use client';

import { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { use{{$ entity_type $}}Store } from '../../../store/{{$ entity_name $}}Store';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { ArrowLeft, Edit, Trash2 } from 'lucide-react';
import Link from 'next/link';

export default function {{$ entity_type $}}Detail() {
  const router = useRouter();
  const { id } = useParams();
  const [isDeleting, setIsDeleting] = useState(false);

  const {
    {{$ entity_name $}}s,
    selected{{$ entity_type $}},
    isLoading,
    error,
    fetch{{$ entity_type $}}ById,
    delete{{$ entity_type $}}
  } = use{{$ entity_type $}}Store();

  const {{$ entity_name $}} = selected{{$ entity_type $}} || {{$ entity_name $}}s.find(item => item.id === id);

  useEffect(() => {
    if (id && typeof id === 'string') {
      fetch{{$ entity_type $}}ById(id);
    }
  }, [id, fetch{{$ entity_type $}}ById]);

  const handleDelete = async () => {
    if (confirm('Are you sure you want to delete this {{$ entity_name $}}?')) {
      setIsDeleting(true);
      try {
        await delete{{$ entity_type $}}(id as string);
        router.push('/{{$ entity_name $}}s');
      } catch (err) {
        setIsDeleting(false);
        alert('Failed to delete {{$ entity_name $}}');
      }
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-48">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 p-4 rounded-md border border-red-200">
        <h2 className="text-red-700 text-lg font-semibold">Error loading {{$ entity_name $}}</h2>
        <p className="text-red-600">{error}</p>
      </div>
    );
  }

  if (!{{$ entity_name $}}) {
    return (
      <div className="bg-yellow-50 p-4 rounded-md border border-yellow-200">
        <h2 className="text-yellow-700 text-lg font-semibold">{{$ entity_type $}} not found</h2>
        <p className="text-yellow-600">The requested {{$ entity_name $}} could not be found.</p>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto">
      <div className="mb-4">
        <Link
          href="/{{$ entity_name $}}s"
          className="text-blue-600 hover:text-blue-800 flex items-center"
        >
          <ArrowLeft className="w-4 h-4 mr-1" /> Back to {{$ entity_type $}}s
        </Link>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="flex justify-between items-center">
            <span>{{$ entity_name $}}.name</span>
            <div className="flex space-x-2">
              <Link
                href={`/{{$ entity_name $}}s/{{$ entity_name $}}.id/edit`}
                className="p-2 bg-blue-50 text-blue-600 rounded-md hover:bg-blue-100 transition-colors"
              >
                <Edit className="w-5 h-5" />
              </Link>
              <Button
                variant="destructive"
                size="icon"
                onClick={handleDelete}
                disabled={isDeleting}
              >
                <Trash2 className="w-5 h-5" />
              </Button>
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <h3 className="text-sm font-medium text-gray-500">Description</h3>
            <p className="mt-1">{{$ entity_name $}}.description || 'No description provided'</p>
          </div>

          <div>
            <h3 className="text-sm font-medium text-gray-500">Created</h3>
            <p className="mt-1">{new Date({{$ entity_name $}}.createdAt).toLocaleString()}</p>
          </div>

          <div>
            <h3 className="text-sm font-medium text-gray-500">Last Updated</h3>
            <p className="mt-1">{new Date({{$ entity_name $}}.updatedAt).toLocaleString()}</p>
          </div>

          {/* Additional entity-specific fields would go here */}
        </CardContent>
      </Card>
    </div>
  );
}
