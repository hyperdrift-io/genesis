'use client';

import { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { use{{entity_type}}Store } from '../../../store/{{entity_name}}Store';

export default function {{entity_type}}Detail() {
  const router = useRouter();
  const { id } = useParams();
  const [isDeleting, setIsDeleting] = useState(false);

  const {
    {{entity_name}}s,
    loading,
    error,
    fetch{{entity_type}}ById,
    delete{{entity_type}}
  } = use{{entity_type}}Store();

  const {{entity_name}} = {{entity_name}}s.find(item => item.id === id);

  useEffect(() => {
    if (id) {
      fetch{{entity_type}}ById(id as string);
    }
  }, [id, fetch{{entity_type}}ById]);

  const handleDelete = async () => {
    if (confirm('Are you sure you want to delete this {{entity_name}}?')) {
      setIsDeleting(true);
      try {
        await delete{{entity_type}}(id as string);
        router.push('/{{entity_name}}');
      } catch (err) {
        setIsDeleting(false);
        alert('Failed to delete {{entity_name}}');
      }
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-48">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 p-4 rounded-md border border-red-200">
        <h2 className="text-red-700 text-lg font-semibold">Error loading {{entity_name}}</h2>
        <p className="text-red-600">{error}</p>
      </div>
    );
  }

  if (!{{entity_name}}) {
    return (
      <div className="bg-yellow-50 p-4 rounded-md border border-yellow-200">
        <h2 className="text-yellow-700 text-lg font-semibold">{{entity_type}} not found</h2>
        <p className="text-yellow-600">The requested {{entity_name}} could not be found.</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">{{{entity_name}}.name}</h1>
        <div className="flex space-x-2">
          <button
            onClick={() => router.push(`/{{entity_name}}/${id}/edit`)}
            className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
          >
            Edit
          </button>
          <button
            onClick={handleDelete}
            disabled={isDeleting}
            className="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 disabled:bg-red-300"
          >
            {isDeleting ? 'Deleting...' : 'Delete'}
          </button>
          <button
            onClick={() => router.push('/{{entity_name}}')}
            className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600"
          >
            Back
          </button>
        </div>
      </div>

      <div className="bg-white p-6 rounded-lg shadow-md">
        <dl className="grid grid-cols-1 gap-4">
          <div>
            <dt className="text-sm font-medium text-gray-500">ID</dt>
            <dd className="mt-1 text-gray-900 break-all">{{{entity_name}}.id}</dd>
          </div>
          <div>
            <dt className="text-sm font-medium text-gray-500">Name</dt>
            <dd className="mt-1 text-gray-900">{{{entity_name}}.name}</dd>
          </div>
          <div>
            <dt className="text-sm font-medium text-gray-500">Description</dt>
            <dd className="mt-1 text-gray-900">{{{entity_name}}.description || 'No description provided'}</dd>
          </div>
          <div>
            <dt className="text-sm font-medium text-gray-500">Created</dt>
            <dd className="mt-1 text-gray-900">{new Date({{entity_name}}.createdAt).toLocaleString()}</dd>
          </div>
          <div>
            <dt className="text-sm font-medium text-gray-500">Last Updated</dt>
            <dd className="mt-1 text-gray-900">{new Date({{entity_name}}.updatedAt).toLocaleString()}</dd>
          </div>
        </dl>
      </div>
    </div>
  );
}
