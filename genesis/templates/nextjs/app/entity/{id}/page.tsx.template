'use client';

import React, { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { fetch{{$ entity_type $}}, delete{{$ entity_type $}} } from '../../../services/{{$ entity_name $}}Service';
import { {{$ entity_type $}} } from '../../../types/{{$ entity_name $}}';

export default function {{$ entity_type $}}DetailPage() {
  const params = useParams();
  const router = useRouter();
  const id = params.id as string;

  const [item, setItem] = useState<{{$ entity_type $}} | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function loadItem() {
      try {
        const data = await fetch{{$ entity_type $}}(id);
        setItem(data);
      } catch (err) {
        setError('Failed to load {{$ entity_name $}}');
        console.error(err);
      } finally {
        setLoading(false);
      }
    }

    loadItem();
  }, [id]);

  if (loading) return <div className="flex justify-center p-8"><div className="animate-spin h-8 w-8 border-t-2 border-b-2 border-indigo-500 rounded-full"></div></div>;
  if (error) return <div className="p-4 bg-red-50 text-red-500 rounded-md">{error}</div>;
  if (!item) return <div className="p-4 bg-yellow-50 text-yellow-700 rounded-md">{{$ entity_type $}} not found</div>;

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="bg-white shadow-md rounded-lg p-6">
        <h1 className="text-2xl font-bold mb-4">{item.name}</h1>
        {item.description && (
          <p className="text-gray-700 mb-4">{item.description}</p>
        )}
        <div className="flex justify-between items-center text-sm text-gray-500">
          <span>Created: {new Date(item.createdAt).toLocaleDateString()}</span>
          <span>Updated: {new Date(item.updatedAt).toLocaleDateString()}</span>
        </div>

        <div className="mt-6 pt-6 border-t border-gray-200 flex space-x-4">
          <button
            onClick={() => router.push(`/{{$ entity_name $}}s/${id}/edit`)}
            className="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700"
          >
            Edit
          </button>
          <button
            onClick={() => {
              if (confirm('Are you sure you want to delete this {{$ entity_name $}}?')) {
                try {
                  delete{{$ entity_type $}}(id).then(() => {
                    router.push('/{{$ entity_name $}}s');
                    router.refresh();
                  }).catch((error) => {
                    console.error('Error deleting {{$ entity_name $}}:', error);
                    alert('Failed to delete {{$ entity_name $}}');
                  });
                } catch (error) {
                  console.error('Error deleting {{$ entity_name $}}:', error);
                  alert('Failed to delete {{$ entity_name $}}');
                }
              }
            }}
            className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
          >
            Delete
          </button>
          <button
            onClick={() => router.back()}
            className="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300"
          >
            Back
          </button>
        </div>
      </div>
    </div>
  );
}
