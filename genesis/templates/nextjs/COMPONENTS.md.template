# UI Components Guide

This project uses [Ant Design](https://ant.design) as the default UI component library, providing a comprehensive set of accessible, production-ready components for rapid development and a consistent user experience.

## Core Libraries

| Library      | Version | Description                | Documentation                                      |
|--------------|---------|----------------------------|----------------------------------------------------|
| Ant Design   | Latest  | UI component library       | [Docs](https://ant.design/components/overview/)    |
| Lucide Icons | 0.312.0 | Beautiful & consistent icon toolkit | [Docs](https://lucide.dev/guide/installation) / [Icons](https://lucide.dev/icons) |
| Zustand      | 4.5.0   | Small, fast state management | [Docs](https://docs.pmnd.rs/zustand/getting-started/introduction) |

## Using Ant Design Components

Ant Design provides a wide range of components. Here are some common examples:

### Button
```tsx
import { Button } from 'antd';

<Button type="primary">Primary Button</Button>
<Button>Default Button</Button>
<Button type="dashed">Dashed Button</Button>
<Button type="text">Text Button</Button>
<Button type="link">Link Button</Button>
```

### Input
```tsx
import { Input } from 'antd';

<Input placeholder="Basic usage" />
```

### Form
```tsx
import { Form, Input, Button } from 'antd';

<Form>
  <Form.Item label="Username" name="username">
    <Input />
  </Form.Item>
  <Form.Item>
    <Button type="primary" htmlType="submit">Submit</Button>
  </Form.Item>
</Form>
```

### Card
```tsx
import { Card } from 'antd';

<Card title="Card Title" bordered={false} style={{ width: 300 }}>
  Card content
</Card>
```

## Using Lucide Icons

This project includes Lucide for beautiful, consistent icons. To use them:

```tsx
import { Heart, Share, Trash } from "lucide-react";

<Heart className="icon" />
<Share className="icon" />
<Trash className="icon" />
```

Browse all available icons at [lucide.dev/icons](https://lucide.dev/icons).

## State Management with Zustand

Zustand is used for state management. Example usage:

```tsx
import { useUserStore } from '@/store/userStore';

function Component() {
  const { users, fetchUsers } = useUserStore();
  // ...
}
```

## Styling Guidelines

- Use **plain CSS files** for global/shared styles (e.g., layout, typography, colors).
- Use **CSS Modules** for component-specific (non-shared) styles to ensure encapsulation and avoid style leakage.
- Avoid inline styles except for dynamic or one-off cases.

## Theming

Ant Design supports theming via [ConfigProvider](https://ant.design/components/config-provider/) and CSS variables. Refer to the Ant Design documentation for details on customizing the theme to match your brand.
